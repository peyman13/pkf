"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
#import ../Modules/*/Graphql/*.graphql

enum prkar {
  PROVINCE @enum(value: "province")
  COMPETENCY @enum(value: "competency")
  CITY @enum(value: "city")
  MUNICIPALITY @enum(value: "municipality")
  EMPLOYEE @enum(value: "employee")
  StepTwo @enum(value: "steptwo")
}

enum prkar_gender {
  WMN @enum(value: "WMN")
  MAN @enum(value: "MAN")
}

enum prkar_nationality {
  foreign @enum(value: "foreign")
  iranian @enum(value: "iranian")
}

enum prkar_education {
  NED @enum(value: "NED")
  BSD @enum(value: "BSD")
  GUID @enum(value: "GUID")
  HIGH @enum(value: "HIGH")
  DPA @enum(value: "DPA")
  ADPA @enum(value: "ADPA")
  BCH @enum(value: "BCH")
  MTR @enum(value: "MTR")
  PPHD @enum(value: "PPHD")
  PHD @enum(value: "PHD")
  CLER @enum(value: "CLER")
}

enum prkar_marital_status {
  SNG @enum(value: "SNG")
  MRD @enum(value: "MRD")
  MOL @enum(value: "MOL")
}

enum prkar_military_status {
  EXCL @enum(value: "EXCL")
  PASS @enum(value: "PASS")
  ILEG @enum(value: "ILEG")
  pcIno @enum(value: "pcIno")
}

enum prkar_religion{
  ISLM @enum(value: "ISLM")
  CHRS @enum(value: "CHRS")
  JEWISH @enum(value: "JEWISH")
  ZRSH @enum(value: "ZRSH")
  OTHER @enum(value: "OTHER")
}

enum prkar_health_status {
  NHD @enum(value: "NHD")
  HLT @enum(value: "HLT")
}

enum prkar_sect {
  SUNI @enum(value: "SUNI")
  SHIA @enum(value: "SHIA")
}

enum prkar_company {
  PRV @enum(value: "PRV")
  PUB @enum(value: "PUB")
  COP @enum(value: "COP")
  OTHER @enum(value: "OTHER")
}


type Query {
    identities: [Identity!]! @paginate(defaultCount: 10) @orderBy(column: "id", direction: DESC)
    identity(id: ID @eq): Identity @find

    users: [User!]! @paginate(defaultCount: 10) @orderBy(column: "id", direction: DESC)
    user(id: ID @eq): User @find
    
    services: [Service!]! @paginate(defaultCount: 10) @orderBy(column: "id", direction: DESC)
    service(id: ID @eq): Service @find
    
    audits: [Audit!]! @paginate(defaultCount: 10) @orderBy(column: "id", direction: DESC)
    audit(where: _@whereConditions(columns: ["user_type", "id"])): Audit @find

    prkar(method: prkar, id: String = "", data: PrkarRegisterData, stepTwo: PrkarStepTwo): String!
    IBAN(iban: String = "",nationalCode: String = "",birthDate: String = ""): String
    SCS(inquiryType: ID = "",
        nationalCardSerial: String = "",
        nationalCode: String = "",
        mobileNumber: String = "",
        birthDate: String = "" ,
        inquiryValidDuration: String = "" ): String
    
    me: User @auth


}
type Mutation {
    
    createService(users_id: ID @auth,
                  service_id: String!,
                  request:String!,
                  response:String!,
                  steps:String!,
                  ): Service! @create @guard 

    updateService(id: ID!, 
                  users_id: ID!,
                  service_id: String!,
                  request:String!,
                  response:String!,
                  steps:String!,
                  ): Service @update @guard
}

input PrkarStepTwo {
  birthDate: String!,
  nationalId: String!,
  mobileNumber: String!,
  nationalCardSerial: String!,
  type: String
}

input PrkarRegisterData {
  employee: Employee!,
  person: Person!,
  starter: String,
  iban: String,
  ekycVideoReference: String
}

input Employee {
  education: prkar_education,
  maritalStatus: prkar_marital_status,
  militaryStatus: prkar_military_status,
  religion: prkar_religion,
  bodyState: prkar_health_status,
  sect: prkar_sect,
  numberOfChildren: String
}

input Person {
  firstName: String,
  lastName: String,
  birthDate: String,
  sex: prkar_gender,
  nationalId: String,
  identityId: String,
  personImage: String
  nationality: prkar_nationality,
  homeContact: HomeContact!
}
input HomeContact {
  postalCode: String,
  phoneNumberCode: String,
  phoneNumber: String,
  mobileNumber: String,
  province: String,
  city: String,
  address: String,
  email: String
}







"""
Add a dynamically client-controlled WHERE condition to a fields query.
@guard
"""
directive @whereConditions(
  """
  Restrict the allowed column names to a well-defined list.
  This improves introspection capabilities and security.
  Mutually exclusive with the `columnsEnum` argument.
  """
  columns: [String!]

  """
  Use an existing enumeration type to restrict the allowed columns to a predefined list.
  This allowes you to re-use the same enum for multiple fields.
  Mutually exclusive with the `columns` argument.
  """
  columnsEnum: String
) on ARGUMENT_DEFINITION


type Audit {
    id: ID!
    user_type: String!
    user_id: String!
    event: String!
    auditable_type: String!
    auditable_id: String!
    new_values: String!
    old_values: String!
    created_at: DateTime!
    updated_at: DateTime!
}



